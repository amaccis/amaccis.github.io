<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on amaccis.blog</title><link>https://amaccis.github.io/posts/</link><description>Recent content in Posts on amaccis.blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 25 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://amaccis.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Size Matters</title><link>https://amaccis.github.io/posts/size-matters/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://amaccis.github.io/posts/size-matters/</guid><description>Since I was curious about PHP Foreign Function Interface, after the release of PHP 7.4.0 I decided to write the library PHP Stemmer, a simple PHP interface to the Snowball stemming algorithms.
After some time I thought I could take advantage of that experience for having some more fun, so I thought that writing another interface to the Snowball stemming algorithms (this time with another technology, Node.js) could be the right choice and I wrote Node Stemmer.</description></item><item><title>TAI and PHP</title><link>https://amaccis.github.io/posts/tai-and-php/</link><pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate><guid>https://amaccis.github.io/posts/tai-and-php/</guid><description>The first time I&amp;rsquo;ve dealt with TAI (Temps Atomique International/International Atomic Time) was a few years ago, when I was looking for a &amp;ldquo;disappeared&amp;rdquo; email through qmail logs. My first reaction was like: these guys (the ones who set up the logs like that) are nuts!
Don&amp;rsquo;t get me wrong, TAI is awesome as means of time-keeping, because it is extremely precise (atomic clocks deviate only 1 second in up to 100 million years) and we can also consider it very nerdy, just think that one TAI second is defined as the duration of 9.</description></item><item><title>Trying to learn Haskell - Pattern matching</title><link>https://amaccis.github.io/posts/trying-to-learn-haskell-pattern-matching/</link><pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate><guid>https://amaccis.github.io/posts/trying-to-learn-haskell-pattern-matching/</guid><description>The first time I read about Haskell pattern matching, Python slicing syntax came to my mind.
If you are not familiar with Python slicing, it&amp;rsquo;s easier than you think. Imagine you have a list of n items, and you want to get a subset of that list, let&amp;rsquo;s say you want all the items of the original list except for the first one. Python solves the problem in a simple and elegant way.</description></item><item><title>Trying to learn Haskell - Recursion</title><link>https://amaccis.github.io/posts/trying-to-learn-haskell-recursion/</link><pubDate>Sat, 04 Mar 2023 00:00:00 +0000</pubDate><guid>https://amaccis.github.io/posts/trying-to-learn-haskell-recursion/</guid><description>It&amp;rsquo;s a fact that we, bad programmers, avoid the recursion as much as we can. Maybe it&amp;rsquo;s a practice you absorb when you program with imperative languages or, somehow you&amp;rsquo;re pushed to think about optimization (iterative algorithms are often faster than recursive ones) or you tell yourself that recursion produces code hard to read, to debug and to maintain, but the fact is that whenever you can apply loops (almost always) you do it.</description></item><item><title>Trying to learn Haskell - List comprehensions</title><link>https://amaccis.github.io/posts/trying-to-learn-haskell-list-comprehensions/</link><pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate><guid>https://amaccis.github.io/posts/trying-to-learn-haskell-list-comprehensions/</guid><description>Every time I tried to learn functional programming, I hated it and I did not achieve any appreciable result. Probably it will go the same way this time too, anyway I thought to give functional programming, and in particular Haskell, one more chance. For this reason I&amp;rsquo;ve just started reading a beautiful book: Learn You a Haskell for Great Good!.
I thought I may write down all the interesting (or weird) things I find out, trying, if possible, to compare them with other things I already know.</description></item></channel></rss>